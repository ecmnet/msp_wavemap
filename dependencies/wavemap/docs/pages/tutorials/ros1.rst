ROS1 Interface
##############
.. rstcheck: ignore-roles=gh_file

The :doc:`demos page <../demos>` features several examples of how to run wavemap on existing datasets. In the sections that follow, we start by providing an overview of the packages that are included in wavemap's ROS1 interface. We then discuss how they can be configured to process your own sensor data. Finally, we explain how you can interact with wavemap in your own ROS nodes to enable new, custom use cases.

Overview of packages
********************
Wavemap's ROS1 interface consists of the following packages:

* ``wavemap``: A catkin wrapper for wavemap's C++ Library
* ``wavemap_msgs``: Message types to transmit wavemap maps over ROS
* ``wavemap_ros_conversions``: Conversions between ROS and internal wavemap types
* ``wavemap_ros``: The ROS server, rosbag processor, and example config and launch files
* ``wavemap_rviz_plugin``: Rviz plugin to efficiently visualize and inspect wavemap maps
* ``wavemap_all``: A meta package that builds all of the above packages

Your own data
*************
The only requirements to run wavemap on your own dataset or robot are:

1. a source of depth measurements,
2. sensor pose (estimates) for each measurement.

We usually use depth measurements from depth cameras or 3D LiDARs, but any source would work as long as a sufficiently good :ref:`projection <configuration_projection_models>` and :ref:`measurement <configuration_measurement_models>` model is available. Wavemap's ROS1 interface natively supports depth image and pointcloud inputs, and automatically queries the sensor poses from the TF tree.

To help you get started quickly, we provide example :gh_file:`config <interfaces/ros1/wavemap_ros/config>` and ROS :gh_file:`launch <interfaces/ros1/wavemap_ros/launch>` files for various sensor setups and use cases. An overview of all the available settings is provided on the :doc:`parameters page <../parameters/index>`.

Publishing maps
===============
Wavemap's ROS server offers multiple ways to publish its maps to ROS topics, enabling visualization and usage by other ROS nodes. Please refer to the documentation on :ref:`ROS1 map operations <configuration_map_operations_ros1>` for an overview of the available options.

Saving maps
===========
The server's map can also be written to disk by calling its ``save_map`` service as follows:

.. code-block:: bash

    rosservice call /wavemap/save_map "file_path: '/path/to/your/map.wvmp'"

Saved maps can subsequently be used :ref:`in C++ <cpp-code-examples-read-map>` (with or without ROS) and :ref:`in Python <python-code-examples-read-map>`.

Your own code
*************
We now briefly discuss how to set up your own ROS1 package to use wavemap, before proceeding to code examples.

.. tip::

    An example package that combines the setup steps and code examples that follow can be found :gh_file:`here <examples/ros1>`.

Build configuration
===================
In order to use wavemap's ROS1 packages in your own code, you need to add them as dependencies and configure your CMake targets to use them.

Declare dependencies
--------------------
For illustration purposes, we will assume your package uses ``wavemap``, ``wavemap_msgs`` and ``wavemap_ros_conversions``.

First, declare them as dependencies in your package's `package.xml`:

.. code-block:: XML

    <depend>wavemap</depend>
    <depend>wavemap_msgs</depend>
    <depend>wavemap_ros_conversions</depend>

Next, import them as catkin `COMPONENTS` in your package's `CMakeLists.txt`:

.. code-block:: cmake

    # Find dependencies
    find_package(catkin REQUIRED
        COMPONENTS wavemap wavemap_msgs wavemap_ros_conversions)

Finally, include them in `CATKIN_DEPENDS` when calling ``catkin_package`` in your `CMakeLists.txt`:

.. code-block:: cmake

    # Register catkin package
    catkin_package(
        LIBRARIES ${PROJECT_NAME}
        CATKIN_DEPENDS wavemap wavemap_msgs wavemap_ros_conversions)

CMake target setup
------------------
The libraries and executables generated by your code are referred to as CMake targets. They have to be linked to the libraries provided by wavemap's ROS1 packages in order to use them. Furthermore, they must know where to find each library's header files.

Importing ROS1 packages as catkin `COMPONENTS` conveniently appends their respective libraries to `catkin_LIBRARIES` and headers to `catkin_INCLUDE_DIRS`. To configure your target, you can therefore simply add:

.. code-block:: cmake

    target_link_libraries(your_target PUBLIC ${catkin_LIBRARIES})
    target_include_directories(your_target PUBLIC ${catkin_INCLUDE_DIRS})

We **strongly recommend** to also call the ``set_wavemap_target_properties`` function to ensure your target's compilation options are compatible with those of wavemap:

.. code-block:: cmake

      set_wavemap_target_properties(your_target)

Code examples
=============
Since wavemap's ROS1 interface extends its C++ API, all of the :ref:`C++ API's code examples <cpp-code-examples>` can directly be used in ROS.

Additionally, the following code can be used to receive maps over a ROS topic

.. literalinclude:: ../../../examples/ros1/io/receive_map_over_ros.cc
    :language: c++

and maps can be sent over ROS with

.. literalinclude:: ../../../examples/ros1/io/send_map_over_ros.cc
    :language: c++
